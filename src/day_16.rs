use petgraph::algo::astar;
use petgraph::algo::bellman_ford;
use petgraph::prelude::*;
use petgraph::Graph;
use std::collections::HashSet;

fn create_graph(
    map: &Vec<Vec<char>>,
    g: &mut Graph<(), f32, Undirected>,
) -> (NodeIndex, NodeIndex) {
    let (width, height) = (map[0].len(), map.len());
    let end_node_graph = g.add_node(());
    let mut graph_nodes: Vec<Vec<NodeIndex>> = vec![];

    for _ in 0..height {
        let mut row: Vec<NodeIndex> = vec![];
        for _ in 0..width {
            let idx_top = g.add_node(());
            row.push(idx_top);

            let idx_right = g.add_node(());
            row.push(idx_right);

            let idx_bottom = g.add_node(());
            row.push(idx_bottom);

            let idx_left = g.add_node(());
            row.push(idx_left);

            g.add_edge(idx_top, idx_bottom, 2000.0);
            g.add_edge(idx_top, idx_right, 1000.0);
            g.add_edge(idx_top, idx_left, 1000.0);
            g.add_edge(idx_left, idx_right, 2000.0);
            g.add_edge(idx_left, idx_bottom, 1000.0);
            g.add_edge(idx_right, idx_bottom, 1000.0);
        }
        graph_nodes.push(row.clone());
    }
    for j in 1..height - 1 {
        for i in 1..width - 1 {
            if map[j][i] != '#' {
                let idx_top = graph_nodes[j][i * 4];
                let idx_right = graph_nodes[j][i * 4 + 1];
                let idx_bottom = graph_nodes[j][i * 4 + 2];
                let idx_left = graph_nodes[j][i * 4 + 3];

                if map[j - 1][i] != '#' {
                    let idx_north_top = graph_nodes[j - 1][i * 4];
                    //let idx_north_right = graph_nodes[j - 1][i * 4 + 1];
                    let idx_north_bottom = graph_nodes[j - 1][i * 4 + 2];
                    //let idx_north_left = graph_nodes[j - 1][i * 4 + 3];
                    g.add_edge(idx_top, idx_north_top, 1.0);
                    g.add_edge(idx_bottom, idx_north_bottom, 1.0);
                }

                if map[j + 1][i] != '#' {
                    let idx_south_top = graph_nodes[j + 1][i * 4];
                    //let idx_south_right = graph_nodes[j + 1][i * 4 + 1];
                    let idx_south_bottom = graph_nodes[j + 1][i * 4 + 2];
                    //let idx_south_left = graph_nodes[j + 1][i * 4 + 3];
                    g.add_edge(idx_bottom, idx_south_bottom, 1.0);
                    g.add_edge(idx_top, idx_south_top, 1.0);
                }

                if map[j][i + 1] != '#' {
                    //let idx_east_top = graph_nodes[j][(i + 1) * 4];
                    let idx_east_right = graph_nodes[j][(i + 1) * 4 + 1];
                    //let idx_east_bottom = graph_nodes[j][(i + 1) * 4 + 2];
                    let idx_east_left = graph_nodes[j][(i + 1) * 4 + 3];
                    g.add_edge(idx_right, idx_east_right, 1.0);
                    g.add_edge(idx_left, idx_east_left, 1.0);
                }

                if map[j][i - 1] != '#' {
                    //let idx_west_top = graph_nodes[j][(i - 1) * 4];
                    let idx_west_right = graph_nodes[j][(i - 1) * 4 + 1];
                    //let idx_west_bottom = graph_nodes[j][(i - 1) * 4 + 2];
                    let idx_west_left = graph_nodes[j][(i - 1) * 4 + 3];
                    g.add_edge(idx_right, idx_west_right, 1.0);
                    g.add_edge(idx_left, idx_west_left, 1.0);
                }
            }
        }
    }

    let start_node_graph = g.add_node(());

    for j in 0..height {
        for i in 0..width {
            if map[j][i] == 'S' {
                g.add_edge(start_node_graph, graph_nodes[j][i * 4 + 1], 0.0);
            } else if map[j][i] == 'E' {
                g.add_edge(end_node_graph, graph_nodes[j][i * 4], 0.0);
                g.add_edge(end_node_graph, graph_nodes[j][i * 4 + 1], 0.0);
                g.add_edge(end_node_graph, graph_nodes[j][i * 4 + 2], 0.0);
                g.add_edge(end_node_graph, graph_nodes[j][i * 4 + 3], 0.0);
            }
        }
    }

    (end_node_graph, start_node_graph)
}

fn minimum_path(map: &Vec<Vec<char>>) -> (usize, usize) {
    let mut map_of_os: Vec<Vec<char>> = map.clone();
    let (width, height) = (map[0].len(), map.len());
    let mut g = Graph::new_undirected();

    let (f, a) = create_graph(&map, &mut g);

    let path = bellman_ford(&g, a.clone());
    assert!(path.is_ok());
    let path = path.unwrap();
    let final_cost = path.distances[0] as usize;

    let astar_path = astar(&g, a, |finish| finish == f, |e| *e.weight(), |_| 0.0);

    let (cost, apath) = astar_path.unwrap();

    for p in apath.clone() {
        let idx = p.index();
        if idx > 0 {
            let y = (idx - 1) / (4 * width);
            let x = (idx - 1 - y * 4 * width) / 4;
            if x > 0 && x < width && y > 0 && y < height {
                map_of_os[y][x] = 'O';
            }
        }
    }

    //part 2:
    //for every turn in the path, block the nodes,
    //then block all pairs of turning points
    let mut turns: HashSet<NodeIndex> = HashSet::new();
    let mut prev: (usize, usize) = (0, 0);
    for p in apath.clone() {
        if let Some((x, y)) = convert_index_to_xy(&p.index(), &width, &height) {
            if x == prev.0 && y == prev.1 {
                turns.insert(p);
            }
            prev.0 = x;
            prev.1 = y;
        }
    }

    for p in apath.clone() {
        if let Some((x, y)) = convert_index_to_xy(&p.index(), &width, &height) {
            let mut new_map = map.clone();
            new_map[y][x] = '#';

            if let Some(apath2) = mark_map_with_os(&new_map, &mut map_of_os, &cost) {
                prev = (0, 0);
                for p in apath2.clone() {
                    if let Some((x, y)) = convert_index_to_xy(&p.index(), &width, &height) {
                        if x == prev.0 && y == prev.1 {
                            turns.insert(p);
                        }
                        prev.0 = x;
                        prev.1 = y;
                    }
                }
            }
        }
    }
  
    for t1 in turns.clone() {
        for t2 in turns.clone() {
            if t1 != t2 {
                let mut new_map = map.clone();
                //combo
                if let Some((x, y)) = convert_index_to_xy(&t1.index(), &width, &height) {
                    new_map[y][x] = '#';
                }
                if let Some((x, y)) = convert_index_to_xy(&t2.index(), &width, &height) {
                    new_map[y][x] = '#';
                }

                let _astar_path = mark_map_with_os(&new_map, &mut map_of_os, &cost);
            }
        }
    }

    _print_map(&map_of_os);

    let best_spots = map_of_os
        .iter()
        .map(|v| v.iter().filter(|&c| c == &'O').count())
        .sum();

    (final_cost, best_spots)
}

fn convert_index_to_xy(index: &usize, width: &usize, height: &usize) -> Option<(usize, usize)> {
    if *index > 0usize {
        let y = (index - 1) / (4 * *width);
        let x = (index - 1 - y * 4 * *width) / 4;
        if x > 0 && x < *width && y > 0 && y < *height {
            return Some((x, y));
        }
    }
    None
}

fn mark_map_with_os(
    source: &Vec<Vec<char>>,
    map: &mut Vec<Vec<char>>,
    cost: &f32,
) -> Option<Vec<NodeIndex>> {
    let (width, height) = (map[0].len(), map.len());

    let mut g2 = Graph::new_undirected();
    let (f2, a2) = create_graph(&source, &mut g2);

    let astar_path2 = astar(&g2, a2, |finish| finish == f2, |e| *e.weight(), |_| 0.0);
    if let Some((cost2, apath2)) = astar_path2 {
        if cost2 == *cost {
            for p2 in apath2.clone() {
                let idx = p2.index();
                if idx > 0 {
                    let y = (idx - 1) / (4 * width);
                    let x = (idx - 1 - y * 4 * width) / 4;
                    if x > 0 && x < width && y > 0 && y < height {
                        map[y][x] = 'O';
                    }
                }
            }
            return Some(apath2);
        }
    }

    None
}

fn _print_map(map: &Vec<Vec<char>>) {
    for l in map {
        for c in l {
            print!("{}", c);
        }
        println!();
    }
}

fn parse_map(source: &str) -> Vec<Vec<char>> {
    source
        .split('\n')
        .map(|line| line.chars().collect())
        .collect()
}

fn main() {
    let source = "###############
#.......#....E#
#.#.###.#.###.#
#.....#.#...#.#
#.###.#####.#.#
#.#.#.......#.#
#.#.#####.###.#
#...........#.#
###.#.#####.#.#
#...#.....#.#.#
#.#.#.###.#.#.#
#.....#...#.#.#
#.###.#.#.#.#.#
#S..#.....#...#
###############";

    assert_eq!((7036, 45), minimum_path(&parse_map(&source)));

    let source = "#################
#...#...#...#..E#
#.#.#.#.#.#.#.#.#
#.#.#.#...#...#.#
#.#.#.#.###.#.#.#
#...#.#.#.....#.#
#.#.#.#.#.#####.#
#.#...#.#.#.....#
#.#.#####.#.###.#
#.#.#.......#...#
#.#.###.#####.###
#.#.#...#.....#.#
#.#.#.#####.###.#
#.#.#.........#.#
#.#.#.#########.#
#S#.............#
#################";

    assert_eq!((11048, 64), minimum_path(&parse_map(&source)));

    let source =
"#############################################################################################################################################
#...........#.....#.........#...#...#.............#.....#.......#.........#.......#...#...#.......#...........#.....#.#...#.......#.....#..E#
#.#######.#.#.###.#.#.#.#.#.#.#.#.#.#####.#########.#.#.#.###.###.#####.#.###.###.#.#.#.#.#.###.###.###.#####.###.#.#.#.#.#.#.###.#.#.#.###.#
#...#...#.#.#.#...#.#.#...#.#.#...#.....#.........#.#.#.#.#...#...#.....#...#.#...#.#...#.#...#.#...#...#.#...#...#.#.#.#...#...#.#.#.#...#.#
###.###.#.#.#.#####.#.#####.#.#########.#.#######.#.#.#.#.#.#.#.###.#######.#.#.###.#.###.###.#.#.###.###.#.###.###.#.#.#######.###.#.###.#.#
#.#.#...#.#...#...#.#.#...#.#.#.........#...#.....#.#.#.#.#.#.#.#.#.#.....#.#.#.#...#...#.....#.#.#.#...#...#...#...#.#.....#.#.....#.#.#.#.#
#.#.#.#.#.###.#.#.#.#.#.#.#.#.#.#.###########.#.###.#.#.###.###.#.#.#.###.#.#.#.#.#####.#######.#.#.###.###.###.###.#.#####.#.#######.#.#.#.#
#.....#.#...#...#.#.#.#.#...#...#.#.......#...#.#...#.#...#.....#.#...#.#.#...#.#.....#...#.....#.#...#...#...#...#...#.....#.......#.#.#.#.#
###########.#.###.#.#.#.#######.#.###.###.#.#####.###.###.#.#####.#####.#.#####.###.#.###.#.#####.#.#.###.###.#.#.#####.#######.#####.#.#.#.#
#.....#...#.#...#...#.#...#.....#.....#...#.........#.#...#.......#.....#...#.#...#.#.#...#.......#.#.#...#...#.#.#...#...#...#.#.....#.#.#.#
#.###.#.#.#.#.#####.#.###.#.#.#.#######.###.#########.#.#########.#.#.#####.#.###.#.#.#.###########.#.#.###.###.#.#.#.###.#.#.#.#.#####.#.#.#
#...#.#.#.#...#...#.#.#...#.#.....#...#...#...#.....#.#.....#.....#.#...#...#.#...#.#.......#.......#.#...#.......#.#...#...#...#...#...#.#.#
###.#.#.#.###.#.#.###.#.#######.#.#.#####.#####.###.#.#####.#.#.#######.#.#.#.#.#####.#####.#.#######.###.#####.###.###.#######.###.###.#.#.#
#...#.#.#...#.#.#.#...#.........#.#...........#.#.#...#...#...#.........#.#...#.......#...#.......#...#.#...#.#.#...#.#.#.......#...#...#...#
#.###.#.###.###.#.#.#.#########.#.###########.#.#.#######.###.#########.#.#.#.#######.###.#####.#.#.###.###.#.#.#.###.#.#.#######.###.#####.#
#.....#...#...#.#.#.#.#.....#.....#.......#.....#...........#...#...#.#.#.#.#.......#...#.......#.#.......#.#...#.#...#...#.......#.........#
#.#.#.###.###.#.#.#.#.#.###.#######.#####.#########.#.#####.###.#.#.#.#.#.#.#######.###.#####.###.###.#####.#.###.#.#.#####.#.#####.#########
#.#.#...#...#...#.#.#.#...#...#...#.#.#...#...#...#.#.#.....#...#.#...#.#.#...#...#...#.....#...#.....#.....#...#...#.....#.#...........#...#
#.#.###.###.#.#.#.#.#####.###.#.#.#.#.#.#.#.#.#.#.#.#.###.###.###.#####.#.###.#.#####.#####.#######.###.#####.#########.###.#.#########.#.#.#
#.............#.#...#...#.#.....#.....#.#.#.#...#.#.#...#.#...#.#.......#...#.#.#.....#...#.......#.#...#.....#...#.....#...#.#.....#...#.#.#
#.#####.#.###.#.#.#.#.#.#.#.#########.#.###.#####.#####.#.#.###.#.#######.#.#.#.#.#####.#########.#.#.#####.###.#.#.#####.###.#.###.#.###.#.#
#.....#...#.#.#.#.#...#.#...#.#.....#.......#...#.#.....#.#...#...#.....#.#.#.......#...#.......#.#.#.....#.#...#.#...#...#.#.#.#.#.#.....#.#
#.###.#####.#.#.###.###.###.#.#.###.#########.#.#.#.#####.###.#.###.###.###.#.#####.#.#.#.#####.#.#######.###.###.#.#.#.###.#.#.#.#.#####.#.#
#...#.#.......#...#.#...#.....#.#.#...............#.#...#.#...#.#...#.#.....#.#...#...#.#.....#.#.....#...#...#...#.#.#.....#.#.#.#...#.....#
#####.#.#########.#.#.###.#####.#.#################.#.#.#.#.###.#.#.#.#######.#.#.#########.###.#####.#.###.###.#.#.#.#.#.#.#.#.#.#.#.###.###
#.....#.....#...#...#.....#.....#.....#.............#.#...#.#.....#.#.........#.#...#.....#.#...#.....#.#...#.#...#...#.#.#...#.#...#...#.#.#
#.#########.#.#.###.#######.#####.###.#.###.#.###.###.#####.#.#####.#.###.#.#.#.###.#.#.###.#.#.#.#####.#.###.#.###.#.#.#.#####.###.###.#.#.#
#.....#...#...#...#.......#.#.....#...#...#.....#.#.......#.#.#.....#...#...#.#...#...#...#.......#.......#...#.#.......#...#...#.....#.#.#.#
#####.#.#.#######.#########.#.#####.###########.#.#########.#.#.#############.###.#######.#.#######.#####.#.###.#.#####.###.#.###.#.###.#.#.#
#.....#.#.........#...#.....#.#...............#.#.......#...#.#.#...........#...#...#.....#.#.........#...#...#.#.....#.#.....#...#.....#...#
#.#######.#########.#.#.#####.#############.#.#########.#.###.#.#####.###.#.###.###.#.#####.#.#.#####.#.#####.#.#####.#.#####.#.###.#####.#.#
#...#...#.....#.....#...#.................#...#.......#.#...#.#.#.....#.............#.......#.#.....#.........#.....#.......#...#...#...#...#
#.#.#.#.#####.###.#######.###.###########.#.###.#####.#.###.###.#.#####.###.###.#.###.#######.#####.#########.#####.#.#####.###.#.#.#.#.#.###
#.#...#.....#...#.#.............#...#...#.#.......#.#...#.#.....#.#.........#.#.#.#.....#...#.....#.#.....#...#...#...#.#.....#.#.#...#.....#
###########.#.#.#.#.###########.#.#.#.#.#.#.###.#.#.###.#.#######.#######.#.#.#.#.#.###.#.#######.#.#.###.#.###.#.#####.#.#####.#.#.#####.#.#
#...#.....#.#.#...#...#.......#...#...#.#.#.....#.#...#.....#...#.........#.#...#...#.#.#.........#.#...#.#.........#...#...#...#.#.#.#.....#
#.#.#.###.#.#.###.#.###.#####.###########.###.###.#.#.#####.#.###.#.#.#####.###.#####.#.#######.###.###.#.#.#######.#.#.###.#.###.#.#.#.#.#.#
#.#...#...#.#.....#...#...#.......#.......#...#...#...........#...#...#...#.......#...#.......#.#.....#.#.#.#...#.....#...#.....#.#.#.#.#...#
#.#####.###.#.#####.#.#.#.#######.#.#######.###.###.#####.#####.#######.#.#####.#.###.#######.#.#.#.###.#.#.#.#.###########.#####.#.#.#.###.#
#.#...#.#.....#.....#.#.#...........#.....#.#.....#.....#...#...#...#...#.....#.#...........#.#...#.#...#.#.#.#...........#...#...#...#...#.#
#.###.#.#####.#.#####.#.###.###.#.#######.#.#####.#.###.###.#.#####.#.###.###.#.#############.#####.#.###.#.#.###########.###.#.#####.###.#.#
#...#.#...#...#.#...#.#.#.#.....#.#.....#.#.......#...#...#.#...#...#.#.....#.#.............#...#.#.#.#.#.#.#.#.......#.#.#...#.#.......#.#.#
###.#.#.#.#.#.#.###.#.#.#.#.#######.###.#.#######.###.###.#####.#.###.#.#.#.#.#############.###.#.#.#.#.#.###.###.###.#.#.#.###.#.#######.#.#
#...#.....#...#...#.#.#...#.#...#...#...#.....#.....#.#.#.......#.#.......#.#.....#...#...#...#.....#.#...#...#...#.....#.#...#...#...#...#.#
#.#####.#####.###.#.#.#####.#.#.#.###.#####.###.#####.#.#########.#.#####.#####.#.#.#.#.#.#.#.#.#####.#.###.###.#######.#.#.#######.#.#.###.#
#.....#.....#...#...#.....#.#.#.#...#.#...#.......#...#.......#...#.#...#...#...#...#.#.#.#.#.#.......#.....#.#.......#.#.#.#.....#.#.#...#.#
#.###.#####.#.###.#.#####.#.#.#.###.#.#.#.#.#######.###.#####.###.#.#.#.###.#.#######.#.#.#.#.#.#.###########.#.#####.###.#.#.###.#.#.###.#.#
#.#.#.....#.#.....#.#.#...#...#.#...#.#.#.#...#.....#...#...#.#...#...#.#...#...#...#...#.#.#.#...#.#.....#...#.#...#.......#...#...#...#.#.#
#.#.#####.#.###.###.#.#.#####.#.#.###.#.#.#####.#######.#.#.#.#.#######.#.#.###.###.#####.#.#######.#.###.#.#.#.#.#.#######.###.#######.#.#.#
#.#...#...#...#...#...#.......#...#.#...#...#...#.......#.#.#.#.......#...#...#...#.#.....#.............#...#.....#...#...#...#...#...#...#.#
#.###.#.#####.###.###.#####.#.#####.#######.#.#####.#####.#.#.#.#.###.###.#######.#.#.#####.#############.###########.#.#.###.#.#.#.#.#####.#
#...#.#...#.#.....#...#.#.......#.........#.#...#...#...#.#...#.#...#.....#...#...#...#...#...#.....#...#.#...#.....#.#.#.......#...#...#...#
###.#.###.#.###.#.#.###.#.#####.###.#.#####.###.#.#####.#.#.#.#.#.#.#######.#.#.#.#.###.#.###.###.#.#.#.#.###.#.###.#.#.#.#####.#####.#.#.###
#.#...#...#.....#.#...#.#.#...#.....#.#.......#.#...#...#.#...#...#.......#.#...#...#...#...#.....#.#.#.#.....#.#.#.#.#.#.....#.....#.#.#...#
#.###.#.###.#####.###.#.#.#.#.#####.#.#.###.###.###.#.#.#.###############.#.#########.#####.#######.#.#.#######.#.#.###.#####.#####.###.###.#
#.....#...#...#.....#.#.#...#.#...#...#.#...#...#...#.#.#.#.....#...#.....#...#...#...#...#.#.......#.#...#...#.#.#...#...#.#...#.#.....#...#
#.#######.###.###.###.#.#####.#.###.###.#####.###.###.###.#.#.###.#.#.#######.#.#.#.###.###.#.#######.###.#.#.#.#.###.#.#.#.###.#.#######.###
#...#...#.#.....#.....#...#...#.......#.....#.#...#.......#.#...#.#.#.#...#...#.#.#.#...#...#.#.......#...#.#...#.....#.#.#.....#...#.....#.#
###.#.#.#.#####.###.###.#.#.#.#.#####.#####.#.#.#.#.#########.#.#.#.#.###.#.###.#.#.#.#.#.#####.#.#.###.###.#####.#######.#.#####.###.#####.#
#.................#.....#...#.#.....#...#...#...#.#...#.....#.#...#.#.....#.#...#...#.#.#.......#.#...#...#.#...#.......#.#.....#...#.#.....#
#.#.#.#######.###.###.#######.#####.###.#.#######.###.#.###.#.#####.#.#.#.#.#.#######.###########.###.#.#.#.#.#.#######.#.#####.###.#.###.#.#
#.#...#.....#.#...#...#.....#.#...#...#.#...........#...#.#.#...#.#.....#.#.#...#...#...........#...#...#...#.#...#...#.#.....#...#.#.....#.#
#.#.#.#.###.#.#.#######.###.#.#.#.###.#.#####.#####.#####.#.###.#.#####.#.#.###.#.#.#.#####.###.###.#.#.#####.###.###.#.#####.###.#.#######.#
#...#...#.#.#.#...#.....#.....#.#.....#.....#.....#.......#...#.#.....#...#...#.#.#.#.#...#...#...#.#.#.#...#...#.....#.......#.#.#.......#.#
#####.###.#.#.###.#.#############.#####.###.#####.#.#########.#.#.#.#.#.#####.#.#.###.#.#.###.###.#.#.#.#.#.#.#.#.#############.#.#.#.###.#.#
#...#...#.....#...#.......#.....#.........#.....#.#.#.........#...#.#.#.#.....#.#.....#.#...#...#.#.#.#.#.#...#.#.#.....#.......#.#.#...#.#.#
#.#.#.#.#######.###.#####.###.#.#.#####.###.#####.#.#.###.#######.#.#.###.#####.#.#####.###.###.###.#.#.#####.#.###.###.#.#.#####.#.###.###.#
#.#...#.....#...#.......#.#...#.#.....#.#...#.......#.#...........#.#.....#...#.#.#.....#.#...#.#...#.#.....#.#...#...#...#.......#.........#
#.###.#####.#.###########.#.###.#####.###.###.#####.#.#.###########.#####.#.#.#.#.#.#.#.#.###.#.#.#########.#.###.###.#############.#.#.#####
#.#.........#.#...........#.#...#...#...#...#.......#.#.....#...#...#.....#.#...#.#...#.#...#...#.#.......#.#...#.#...#.....#...........#...#
#.###.#####.#.###.#########.#.###.#####.###.#####.###.#####.#.###.###.###.#.#####.#.#.#.###.#.###.#.#.###.#.###.#.#.#####.#.###########.#.#.#
#.........#.#.#...#.........#...#...........#.....#...#.....#.#...#...#.#.#.......#.#.#.......#...#.#...#.#.#.#.#.#.#.....#.......#.....#.#.#
#####.###.#.#.#.#####.#.#######.#############.#.###.###.#####.#.###.###.###.#.#####.#.#.#.#####.###.###.#.#.#.#.#.#.#.###########.#####.#.#.#
#.........#.#...#...#.#.#.....#.#...#.....#...#.#...#.#.......#.#.....#...#.#...#...#...#.......#...#...#...#.#.#...#.......#.....#.....#.#.#
#.###.#####.#####.#.#.#.###.###.#.#.#.###.#.#.###.###.#####.#.#.#.#######.#.###.#.#.###############.#.#######.#.#####.#####.###.###.###.#.#.#
#.......#.........#.#.#...#...#...#...#.....#.....#...........#.#...#...#...#...#...#.............#.#.#.....#...#.....#...#...#.....#.#.#...#
#.###.#.#.#.#.#####.###.#.#.#.#########.#######.###.###########.###.#.#.#####.#####.#.#######.#.#.###.#.###.#.###.#####.#.###.#######.#.#.#.#
#.#...#.#...#...#.....#.#.#.#...#.....#.#.......#...#...........#.....#.....#.....#.#.#.....#...#.....#...#.#.#.........#...#...#.........#.#
#.#.#.#.###.###.#####.#.#.#.###.#.#.###.#.#######.###.#####.#.###.#########.#####.#.#.#.###.#.#############.#.#########.#######.#######.###.#
#...#.#.............#.#.#.#.......#.....#.#.........#.#.#...#.......#.......#...#.#.#.#...#...#.........#...#.......#...#.....#...#.....#...#
###.###.#.#.#.#####.#.###.###.###.#######.###########.#.#.###########.#####.#.###.#.#.#.#.#.###.#######.#.#.###.###.###.#.###.#.#.#.#.#.#.#.#
#.....#.#.#.....#...#.....#...#.....#.....#...........#.#.#...........#...#.#.#...#.#...#.#...#.......#...#.#.....#...#.#.#.....#.....#...#.#
#.###.###.#####.#.###.#####.#.#.#####.#.###.###########.#.###.#########.###.#.#.#.#.###.#.###.#######.#####.#.###.###.#.#.#.#####.###.#.#.#.#
#...#...#.....#.#...#.#...#.#.#...#.......#.#...........#...#.........#.....#.#.#...................#.#...#...#...#...#...#.....#.#.......#.#
#.#.###.#.###.#.###.###.#.#.#####.#.###.#.#.#.#######.#.###.#.#.#.###.#.#####.#.#.#########.#######.#.#.#.###.#.###.#.###.#.###.###.#.###.#.#
#.#.#...#.#...#.#.#.#.....#.....#.#.....#...#.#.........#.#...#.#.#.#.#.......#.#.#.............#.#.#.#.#.......#...#...#...#.#.....#.....#.#
#.#.#.###.#.###.#.#.#.###.#####.#.###########.#.#.###.###.#######.#.#.#######.#.#.#.###.#######.#.#.#.#.###########.###.###.#.#######.#.#.#.#
#.#.#...#...#.#.#.#.#...#.....#.........#.....#.#...............#.#...#.......#.#.#.#.#...#...#...#...#.......#.....#.#.....#.#.........#.#.#
#.#.###.###.#.#.#.#.###.#####.#########.#.#####.###.###########.#.#####.#######.###.#.###.#.#.###.#.#.#######.#.###.#.#.#####.#.###.#.#.#.#.#
#.#...#.....#.#...#...#.....#.#...#...#...#.....#...#...#...#.....#...#.#...#.#.....#...#.#.#.#...#.#.....#.#...#...#...#...#...#.#.....#.#.#
#####.#######.#.#.#.#.#####.#.#.#.###.###.#.###.#.#.#.#.#.#.#####.#.#.#.#.#.#.#######.#.#.#.#.#####.#.###.#.#####.###.###.#.#.###.###.#.#.#.#
#...#.......#.#...#.#.#...#.#...#...#.....#.#.....#...#...#...#...#.....#.#.....#.....#...#.#...#...#.#.#.#...#...#.......#...#.......#...#.#
#.#.###.###.#.#.###.###.#.#.#######.#.#.#.#.###.###########.#.#.#.#.#####.#######.#########.###.#.###.#.#.###.#.#####.#.###.###.###.#.#.#.#.#
#.#.#.......#.#...#.....#.......#...#.#...#.#...#.........#.#.#.#...#.#.........#.....#...#.#.#...#.....#...#...#...#.........#...#.#...#.#.#
#.#.#.#.#####.#.#########.#######.#########.#.###.#######.###.#.#.###.#.#######.#####.#.#.#.#.#####.#######.#.###.#.#########.#####.#.#.#.#.#
#.#...#...#.....#.......#.#.#.....#...#.....#.#...#...........#.#.#.............#.....#.#...#.......#.......#.....#.........#.#.....#.#...#.#
#.#####.#.#####.#.#####.#.#.#.#####.#.#.#####.#.###############.#.#########.###.#.#####.#####.#######.#####################.#.#.#####.###.#.#
#.#...#.#.#...#.#.#.....#.#.#.#.....#.#.#...#.#.........#.......#.......#...#.#.#.....#.....#.#.....#.......#...............#...#...#.#.#...#
#.#.#.#.#.#.#.###.#.#####.#.#.#.#####.#.#.#.#.#########.###############.#.###.#.###.#.#.###.#.#.###.#######.#.#######.###########.#.#.#.#.#.#
#.#.#...#...#.#...#.#...#...#...#...#...................#.............#...........#.#.#...#.#...#...#.....#.#.......#.#...#.....#.#.#.#...#.#
#.#.###.#####.#.###.#.#.###.#####.#.#############.###.###.#####.###########.#####.#.#.#.#.#.#####.###.#.#.#.#.#####.#.###.#.#.#.#.#.#.###.#.#
#.......#...#...#.#...#.#.....#...#.#.......#...#...........#...#.........#.#...#...#...#...#...#...#.#...#...#.....#...#...#.#...#...#...#.#
#.###.#.#.#######.#####.#######.###.#.#####.#.#.#############.###.###.###.#.#.#.###.#########.#.###.#.#.#####.#.#.#####.#####.###.#####.#.#.#
#.#...#.#.....#.......#...#.......#.#.....#...#.#.....#.....#...#.#.....#...#.#.......#...#...#.....#.#.......#.#.....#.......#...#.....#.#.#
#.#.###.#.###.#.#.#######.#.###.###.#####.#####.#.###.#.###.###.#.###.#.#####.#####.#.###.#.#################.#.###.#.#########.###.#####.#.#
#.....#.#.....#.#...#.....#.........#...#.#...#...#.#.#...#...#.#...#.#...#...#.#.......#.#.#.............#...#.....#.....#.........#...#...#
#####.#.#.#####.###.#.###.#.#.#######.#.#.#.#.###.#.#.###.###.#.###.#.#.#.#.###.#.#####.#.#.#.###.#.#####.#.#.###########.#.#####.#.#.#.#.###
#.#.....#.....#.#...#.#...#.#.........#.#.#.#.......#...#.#.#.#.#...#.#.#.#.#...#.#.....#.#.#.#...#...#...#.#...........#.#...#.#.#...#.....#
#.#.###.#.#.#.#.#.#.#.#####.###########.#.#.###.#######.#.#.#.#.#.###.#.#.#.###.#.#####.#.#.###.#.#.###.###.#####.#.###.#.###.#.#.#.#.###.#.#
#.#.#.....#.#...#.#.#.#...#.......#...#...#...#.......#.#.#.....#...#...#.#.#...#.....#...#.#...#.#.....#.......#.#...#.....#...#.#...#...#.#
#.#.#.#.#.#####.#.###.#.#.#######.#.#.#######.#######.#.#.#####.###.###.#.#.#.#.#####.#.###.#.###.#.#####.#####.###.#.#.###.#####.#.###.#.###
#.#...#.#.....#.#.#...#.....#.......#...#...........#.#.#.....#...#...#.#.#...#.......#.#...#...#.#...#.#.#.....#.....#...#...#...#...#.#...#
#.#####.#.###.###.#.###.###.#.#########.#######.#####.#.#####.#.#####.###.###.#####.#.###.#.#.#.#.###.#.#.#.###.#.###.#######.#.###.#.#.#.#.#
#...#...#.........#.......#.....#.....#.....#...#...#.#...#...#.#.....#...#...#...#.#...#...#.#.#...#.#...#...#.#.#.#.#.....#.#.....#.#.#.#.#
#.###.#.#.#######.###########.###.###.#####.#####.#.#.###.#.#####.#####.###.###.#.#####.###.###.#.#.#.#.#####.#.#.#.#.#.###.#.#####.#.#.#.#.#
#...#.#...#...#.......#...#.....#.#...#...#.#.....#.....#.#.#...#.#.....#...#...#.........#.....#.#...#...#.#.#.#.#.#.#.#...#...............#
#.#.#.#.#.#.#.#########.#.#.###.#.###.###.#.#.###.#######.#.#.#.#.###.###.###.###########.#######.#######.#.#.#.#.#.#.#.#.#.#.#.#.#.#####.#.#
#.#.#.#...#.#...........#...#...#...#...#.....#...#.......#...#.....#.#...#.#...#.....#...#.....#...#...#.#.#.#.#.#.#...#.#...#.#.#.....#.#.#
#.#.#.#.###.#####.###########.#####.###.#.#########.#######.#######.#.#.###.###.#.#.#.#.###.###.###.#.#.#.#.#.###.#.#####.#.###.#.#.###.#.#.#
#.#.#.#.#.........#.................#.#.#...........#.#.....#.....#...#...#...#.#...#...#...#...#...#.#.#...#...#.#.....#.#.#...#.....#.#.#.#
#.#.#.#.#.###.#####.#.###.#########.#.#.#####.#######.#.#####.###.#######.###.#.#.#.#####.###.###.###.#.###.###.#.#####.#.#.###.###.#.#.#.#.#
#.#...#.#...#.#.....#...#...#.......#.........#.....#.#...#...#.#.....#.............#.#.....#...#...#.#...#.#.#.#.#.....#.#...#.......#.#...#
#.#####.###.#.#.#######.#####.#####.#.###########.#.#.###.#.###.#####.#.#####.###.#.#.#.###.###.###.#.###.#.#.#.#.#.#.#.#.###.#####.#.#.#.#.#
#.#.....#...#.#...#.....#.....#...#.#.#...#.......#.#...#.......#...#.#.#...#...#.#.#.#.#...#.....#...#.#.#...#.....#.#.....#.......#.#...#.#
#.#.#####.#######.#.###.#.###.#.###.###.#.###.#####.#.###.#####.#.###.#.#.#.#####.#.#.#.#.#.#.###.#####.#.###.#######.#.###.#######.#######.#
#...#...#.#.......#...#.#.#.....#...#...#...#.#.....#.#...#.....#...#...#.#.......#...#...#.#.#...#.....#.#.#.#.#.......#.........#.........#
#.###.#.#.#.#########.###.#.#.#.#.###.#####.#.#####.#.#.#.#.#.#####.#####.#######.#########.#.#.#####.###.#.#.#.#.#.###.#.#######.###########
#.#...#...#...#.....#...#.#.#...#.....#.....#.....#...#...#.#...#...#...#.#...#...#.................#...#.#.....#.#...#.#.#...#...#.........#
#.#.#.#.#####.#.#.#####.#.#.#.#########.#######.#.#######.#.#.#.#.#.#.###.###.#.###.#.#####.#.#.#.#.###.#.#####.#.###.#.#.#.#.#####.#####.#.#
#.#.#.#.#...#.#.#.....#...#.#.#...#...#...#...#.#.#.......#.#.#...#.#...#...#...#...#.......#.#...#.....#...#...#.#...#.#.#.#.....#...#...#.#
###.#.#.#.#.#.#.#####.#####.#.#.#.#.#####.#.#.#.#.#.#######.#.#####.###.###.###.#.###########.#########.###.#.###.#.###.###.#####.#.#.#.###.#
#...........#.#...#...#.....#...#...#.....#.#.#.#.....#...#...#...#.......#...#.#...#.#.....#.......#.....#.#...#.......#.......#...#.#.#...#
#.###.###.#.#.###.#.#.#.#####.#####.#.#####.#.###.#####.#.###.#.#########.###.#####.#.#.#.#########.#######.###.#.#######.#######.###.#.#####
#.#.....#.#...#.....#...#...#.......#.......#...#.#.....#.....#.#.........#...#.....#.#.#.....#.#...#.......#...#...........#...#...#.#.....#
#.###.###.#####.#########.###.#################.###.#####.#.#.#.#.#########.###.#####.#.###.#.#.#.###.#######.###############.#.###.#.#####.#
#.........#...#.#...#.........#...#.................#.....#.#...#.#.....#...#...#...#...#.#.#...#.....#.....#...........#.....#...#...#.....#
#.###.#####.#.#.#.#.#.#####.#.#.#.#.#.#########.#.###.#.#.#.#####.###.#.#.###.###.###.###.#.###.#######.#.###.###########.#######.#####.###.#
#.#.........#...#.#.#.#.......#.#...#.#...#...#.#...#.#.#.#.#.....#...#.#...#.#...........#.#...#.....#.#.....#...#...#...#.#...#...#...#.#.#
#.###.###########.#.#.###.###.#.#######.#.#.#.#####.###.#.#.#.#####.###.###.#.#############.#.###.###.#########.#.#.#.#.###.#.#.###.#.###.#.#
#S....#...........#.......#...#.........#...#...........#.#.........#.....#.................#.....#.............#...#...#.....#.......#.....#
#############################################################################################################################################";

    assert_eq!((135536, 583), minimum_path(&parse_map(&source)));
}
