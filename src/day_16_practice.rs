use petgraph::algo::bellman_ford;
//use petgraph::algo::astar;
use petgraph::prelude::*;
use petgraph::Graph;
//use petgraph::algo::floyd_warshall;
use std::collections::HashMap;


#[derive(Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct Position {
    x: usize,
    y: usize,
}


#[derive(Debug, PartialEq, Eq, Hash, Clone)]
enum Direction {
    North,
    East,
    South,
    West,
    Rotate,
}


fn minimum_path(map: &Vec<Vec<char>>)->usize {

    //let mut nodes: Vec<Position> = vec![];
    let mut end_node: Position = Position{x:0,y:0};
    let mut start_node: Position = Position{x:0,y:0};

    for j in 0..map.len() {
        for i in 0..map[j].len() {
            if map[j][i] == 'S' {
                start_node = Position{x: i, y:j};
            }
            if map[j][i] == 'E' {
                end_node = Position{x: i, y:j};
            }
            //intersection nodes (only for debugging):
            /*if map[j][i]!='#' && 
                vec![map[j][i+1], map[j][i-1], map[j-1][i], map[j+1][i]]
                .iter().map(|&c| (c!='#') as usize).sum::<usize>()>2 
            {
                nodes.push(Position{x: i, y: j});        
            }*/
        }
    }
    
    let mut hash:HashMap::<(Position, Direction), HashMap::<Direction, (Position, usize, Direction, Direction)>> = HashMap::new();
    create_graph(&start_node, &Direction::Rotate, &Direction::East, map, &mut hash);
    //println!("GRAPH:{:?}", hash);

    //clean up the graph for search algorithms:
    let mut g = Graph::new();
    let mut graph_uniques:HashMap::<(Position, Direction), NodeIndex> = HashMap::new();
    let mut weight_map: HashMap<(NodeIndex, NodeIndex), i32> = HashMap::new();
    
    let end_graph_node = g.add_node(());
    graph_uniques.insert((end_node.clone(), Direction::Rotate), end_graph_node);
    
    for ((parent, inlet), value) in hash {
        
        let from = if graph_uniques.get(&(parent.clone(), inlet.clone()) ).is_none() {
            let from = g.add_node(());
            graph_uniques.insert((parent.clone(), inlet.clone()), from);
            from
        } else {
            graph_uniques.get(&(parent, inlet)).unwrap().clone()
        };        
    
        for (_, (child, cost, _, mirror)) in value {
            if child.x>0 && child.y>0 {
                let child_inlet = get_mirror_of(&mirror);
                let to = if graph_uniques.get(&(child.clone(), child_inlet.clone()) ).is_none() {
                    let to = g.add_node(());
                    graph_uniques.insert((child.clone(), child_inlet.clone()), to);
                    to
                } else {
                    graph_uniques.get(&(child.clone(), child_inlet)).unwrap().clone()
                };
                g.add_edge(from, to, cost as f32);
                weight_map.insert((from, to), cost as i32);
                
                if child == end_node {
                    g.add_edge(to, end_graph_node, 0.0);
                    weight_map.insert((to, end_graph_node), 0);
                }
            }
        }        
    }
    
    //add internal edges between inlet of same parent:
    let all_inlets = vec![Direction::North, Direction::South, Direction::West, Direction::East];
    for ((pos, p_inlet), p) in graph_uniques.clone() {
        for inlet in all_inlets.clone() {
            if p_inlet!=inlet {
                //add edge and weight.
                if let Some(child) = graph_uniques.get(&(pos.clone(), inlet.clone())) {
                    //how many rotation to get from p_inlet to inlet?
                    let cost = rotation_steps(&p_inlet, &inlet) * 1000;
                    g.add_edge(p, *child, cost as f32);
                    weight_map.insert((p, *child), cost as i32);
                }
            }
        }
    }

    
    let a = graph_uniques.get(&(start_node.clone(), Direction::Rotate)).unwrap().clone();
    //let e = end_graph_node;

    
    /*
    // VERY SLOW !
    let res = floyd_warshall(&g, |edge| {
    if let Some(weight) = weight_map.get(&(edge.source(), edge.target())) {
        *weight
    } else {
        2_147_483_647
    }
    }).unwrap();
    let path = res.get(&(a.clone(), e.clone())).unwrap();
    let final_cost =*path as usize;
    */

    /*
    // Does not return shortest path
    let path = astar(&g, a, |finish| finish == e.clone(), |edg| *edg.weight(), |_| 0.0);
    let path = &path.unwrap().0;
    */
    
    //the best:
    let path = bellman_ford(&g, a.clone());
    assert!(path.is_ok());
    let path = path.unwrap();            
    let final_cost = path.distances[0] as usize;

    //println!("Path to E is {:?}", path);

    final_cost
}

fn create_graph( node: &Position,
                 inlet: &Direction,
                 heading: &Direction,
                    map: &Vec<Vec<char>>, 
                    hash: &mut HashMap::<(Position, Direction), HashMap::<Direction, (Position, usize, Direction, Direction)>>
                    )
{
    let mut paths: HashMap::<Direction, (Position, usize, Direction, Direction)> = HashMap::new();
    if let Some(v) = hash.get(&(node.clone(), inlet.clone())) {
        paths = v.clone();            
    }
    
    //each node has 4 outlets:
    let outlets = vec![Direction::North, Direction::South, Direction::West, Direction::East];

    for dir in outlets {
        let dxdy:(i32, i32) = get_direction_increments(&dir);
        let new_cell = ( (node.x as i32+dxdy.0) as usize, (node.y as i32+dxdy.1) as usize);
        if  new_cell.0>0 && new_cell.0<map[0].len()-1 &&
                new_cell.1>0 && new_cell.1<map.len()-1 &&
                map[new_cell.1][new_cell.0]!='#' 
        {
            let mut steps: Vec::<Direction> = vec![];
            let to = Position{x: new_cell.0, y: new_cell.1};
            let found_node=find_next_node(&to, &heading, &dir, map, &mut steps);
            if found_node.x>0 && found_node.y>0 {
                let cost = calculate_path_cost(&steps);
                paths.insert(dir, (found_node, cost, steps[0].clone(), steps[steps.len()-1].clone()));
            } 
        }
    }  
    
    hash.insert((node.clone(), inlet.clone()), paths.clone());
    
    for (_, (n, cost, _, last_step)) in paths {
        let child_inlet = get_mirror_of(&last_step);
        if cost>0 && hash.get(&(n.clone(), child_inlet.clone())).is_none() {
            create_graph(&n, &child_inlet, &last_step, map, hash);
        }
    }
}

fn calculate_path_cost(path: &Vec<Direction>)->usize{
    path.iter().map(|p|
        match p {
            Direction::Rotate=> 1000,
            _=>1,
        }
    ).sum::<usize>()
}

fn get_direction_increments(target: &Direction)->(i32, i32) {
    match target {
        Direction::North => (0, -1),
        Direction::East => (1, 0),
        Direction::South => (0, 1),
        Direction::West => (-1, 0),
        _ => (0,0),
    }
}

fn find_next_node(to: &Position, source: &Direction, target: &Direction, map: &Vec<Vec<char>>, steps: &mut Vec<Direction>)->Position {
    let cur_cell = map[to.y][to.x];
    if cur_cell=='#' {
        return Position{x: 0, y: 0};
    } else if cur_cell=='S' || cur_cell=='E' {
        steps.push(target.clone());
        return to.clone();
    }else if vec![map[to.y-1][to.x], map[to.y+1][to.x], map[to.y][to.x+1], map[to.y][to.x-1]]
        .iter().map(|&c| (c!='#') as usize).sum::<usize>()>2 {
        steps.push(target.clone());
        return to.clone();
    }

    let check_dirs = vec![Direction::North, Direction::South, Direction::West, Direction::East];
    for dir in check_dirs {
        let dxdy:(i32, i32) = get_direction_increments(&dir);
        let new_cell = Position{x: (to.x as i32+dxdy.0) as usize, y:(to.y as i32+dxdy.1) as usize};
        if get_mirror_of(&target)!=dir && map[new_cell.y][new_cell.x]!='#' {
            for _ in 0..rotation_steps(source, target) {
                steps.push(Direction::Rotate);
            }
            
            steps.push(target.clone());
            return find_next_node(&new_cell, target, &dir, map, steps);
        }
    }
    
    Position{x:0, y:0}
}

fn get_mirror_of(source: &Direction)->Direction {
    match source{
        Direction::North => Direction::South,
        Direction::South => Direction::North,
        Direction::West => Direction::East,
        Direction::East => Direction::West,
        _ => Direction::Rotate
    }
}

fn rotation_steps(source: &Direction, target: &Direction)->usize {
    if get_mirror_of(source)==*target {
        2
    } else if source==target || *source==Direction::Rotate || *target==Direction::Rotate {
        0
    } else {
        1
    }
}

fn _print_map(map: &Vec<Vec<char>>) {
    for l in map {
        for c in l {
            print!("{}", c);
        }
        println!();
    }
}

fn parse_map(source: &str)->Vec<Vec<char>>{
    source.split('\n')
        .map(|line|
            line.chars().collect() 
        ).collect()
}

fn main() {
    let source = 
"#################
#...#...#...#..E#
#.#.#.#.#.#.#.#.#
#.#.#.#...#...#.#
#.#.#.#.###.#.#.#
#...#.#.#.....#.#
#.#.#.#.#.#####.#
#.#...#.#.#.....#
#.#.#####.#.###.#
#.#.#.......#...#
#.#.###.#####.###
#.#.#...#.....#.#
#.#.#.#####.###.#
#.#.#.........#.#
#.#.#.#########.#
#S#.............#
#################";

    assert_eq!(11048, minimum_path(&parse_map(&source)));
    
    let source =
"#############################################################################################################################################
#...........#.....#.........#...#...#.............#.....#.......#.........#.......#...#...#.......#...........#.....#.#...#.......#.....#..E#
#.#######.#.#.###.#.#.#.#.#.#.#.#.#.#####.#########.#.#.#.###.###.#####.#.###.###.#.#.#.#.#.###.###.###.#####.###.#.#.#.#.#.#.###.#.#.#.###.#
#...#...#.#.#.#...#.#.#...#.#.#...#.....#.........#.#.#.#.#...#...#.....#...#.#...#.#...#.#...#.#...#...#.#...#...#.#.#.#...#...#.#.#.#...#.#
###.###.#.#.#.#####.#.#####.#.#########.#.#######.#.#.#.#.#.#.#.###.#######.#.#.###.#.###.###.#.#.###.###.#.###.###.#.#.#######.###.#.###.#.#
#.#.#...#.#...#...#.#.#...#.#.#.........#...#.....#.#.#.#.#.#.#.#.#.#.....#.#.#.#...#...#.....#.#.#.#...#...#...#...#.#.....#.#.....#.#.#.#.#
#.#.#.#.#.###.#.#.#.#.#.#.#.#.#.#.###########.#.###.#.#.###.###.#.#.#.###.#.#.#.#.#####.#######.#.#.###.###.###.###.#.#####.#.#######.#.#.#.#
#.....#.#...#...#.#.#.#.#...#...#.#.......#...#.#...#.#...#.....#.#...#.#.#...#.#.....#...#.....#.#...#...#...#...#...#.....#.......#.#.#.#.#
###########.#.###.#.#.#.#######.#.###.###.#.#####.###.###.#.#####.#####.#.#####.###.#.###.#.#####.#.#.###.###.#.#.#####.#######.#####.#.#.#.#
#.....#...#.#...#...#.#...#.....#.....#...#.........#.#...#.......#.....#...#.#...#.#.#...#.......#.#.#...#...#.#.#...#...#...#.#.....#.#.#.#
#.###.#.#.#.#.#####.#.###.#.#.#.#######.###.#########.#.#########.#.#.#####.#.###.#.#.#.###########.#.#.###.###.#.#.#.###.#.#.#.#.#####.#.#.#
#...#.#.#.#...#...#.#.#...#.#.....#...#...#...#.....#.#.....#.....#.#...#...#.#...#.#.......#.......#.#...#.......#.#...#...#...#...#...#.#.#
###.#.#.#.###.#.#.###.#.#######.#.#.#####.#####.###.#.#####.#.#.#######.#.#.#.#.#####.#####.#.#######.###.#####.###.###.#######.###.###.#.#.#
#...#.#.#...#.#.#.#...#.........#.#...........#.#.#...#...#...#.........#.#...#.......#...#.......#...#.#...#.#.#...#.#.#.......#...#...#...#
#.###.#.###.###.#.#.#.#########.#.###########.#.#.#######.###.#########.#.#.#.#######.###.#####.#.#.###.###.#.#.#.###.#.#.#######.###.#####.#
#.....#...#...#.#.#.#.#.....#.....#.......#.....#...........#...#...#.#.#.#.#.......#...#.......#.#.......#.#...#.#...#...#.......#.........#
#.#.#.###.###.#.#.#.#.#.###.#######.#####.#########.#.#####.###.#.#.#.#.#.#.#######.###.#####.###.###.#####.#.###.#.#.#####.#.#####.#########
#.#.#...#...#...#.#.#.#...#...#...#.#.#...#...#...#.#.#.....#...#.#...#.#.#...#...#...#.....#...#.....#.....#...#...#.....#.#...........#...#
#.#.###.###.#.#.#.#.#####.###.#.#.#.#.#.#.#.#.#.#.#.#.###.###.###.#####.#.###.#.#####.#####.#######.###.#####.#########.###.#.#########.#.#.#
#.............#.#...#...#.#.....#.....#.#.#.#...#.#.#...#.#...#.#.......#...#.#.#.....#...#.......#.#...#.....#...#.....#...#.#.....#...#.#.#
#.#####.#.###.#.#.#.#.#.#.#.#########.#.###.#####.#####.#.#.###.#.#######.#.#.#.#.#####.#########.#.#.#####.###.#.#.#####.###.#.###.#.###.#.#
#.....#...#.#.#.#.#...#.#...#.#.....#.......#...#.#.....#.#...#...#.....#.#.#.......#...#.......#.#.#.....#.#...#.#...#...#.#.#.#.#.#.....#.#
#.###.#####.#.#.###.###.###.#.#.###.#########.#.#.#.#####.###.#.###.###.###.#.#####.#.#.#.#####.#.#######.###.###.#.#.#.###.#.#.#.#.#####.#.#
#...#.#.......#...#.#...#.....#.#.#...............#.#...#.#...#.#...#.#.....#.#...#...#.#.....#.#.....#...#...#...#.#.#.....#.#.#.#...#.....#
#####.#.#########.#.#.###.#####.#.#################.#.#.#.#.###.#.#.#.#######.#.#.#########.###.#####.#.###.###.#.#.#.#.#.#.#.#.#.#.#.###.###
#.....#.....#...#...#.....#.....#.....#.............#.#...#.#.....#.#.........#.#...#.....#.#...#.....#.#...#.#...#...#.#.#...#.#...#...#.#.#
#.#########.#.#.###.#######.#####.###.#.###.#.###.###.#####.#.#####.#.###.#.#.#.###.#.#.###.#.#.#.#####.#.###.#.###.#.#.#.#####.###.###.#.#.#
#.....#...#...#...#.......#.#.....#...#...#.....#.#.......#.#.#.....#...#...#.#...#...#...#.......#.......#...#.#.......#...#...#.....#.#.#.#
#####.#.#.#######.#########.#.#####.###########.#.#########.#.#.#############.###.#######.#.#######.#####.#.###.#.#####.###.#.###.#.###.#.#.#
#.....#.#.........#...#.....#.#...............#.#.......#...#.#.#...........#...#...#.....#.#.........#...#...#.#.....#.#.....#...#.....#...#
#.#######.#########.#.#.#####.#############.#.#########.#.###.#.#####.###.#.###.###.#.#####.#.#.#####.#.#####.#.#####.#.#####.#.###.#####.#.#
#...#...#.....#.....#...#.................#...#.......#.#...#.#.#.....#.............#.......#.#.....#.........#.....#.......#...#...#...#...#
#.#.#.#.#####.###.#######.###.###########.#.###.#####.#.###.###.#.#####.###.###.#.###.#######.#####.#########.#####.#.#####.###.#.#.#.#.#.###
#.#...#.....#...#.#.............#...#...#.#.......#.#...#.#.....#.#.........#.#.#.#.....#...#.....#.#.....#...#...#...#.#.....#.#.#...#.....#
###########.#.#.#.#.###########.#.#.#.#.#.#.###.#.#.###.#.#######.#######.#.#.#.#.#.###.#.#######.#.#.###.#.###.#.#####.#.#####.#.#.#####.#.#
#...#.....#.#.#...#...#.......#...#...#.#.#.....#.#...#.....#...#.........#.#...#...#.#.#.........#.#...#.#.........#...#...#...#.#.#.#.....#
#.#.#.###.#.#.###.#.###.#####.###########.###.###.#.#.#####.#.###.#.#.#####.###.#####.#.#######.###.###.#.#.#######.#.#.###.#.###.#.#.#.#.#.#
#.#...#...#.#.....#...#...#.......#.......#...#...#...........#...#...#...#.......#...#.......#.#.....#.#.#.#...#.....#...#.....#.#.#.#.#...#
#.#####.###.#.#####.#.#.#.#######.#.#######.###.###.#####.#####.#######.#.#####.#.###.#######.#.#.#.###.#.#.#.#.###########.#####.#.#.#.###.#
#.#...#.#.....#.....#.#.#...........#.....#.#.....#.....#...#...#...#...#.....#.#...........#.#...#.#...#.#.#.#...........#...#...#...#...#.#
#.###.#.#####.#.#####.#.###.###.#.#######.#.#####.#.###.###.#.#####.#.###.###.#.#############.#####.#.###.#.#.###########.###.#.#####.###.#.#
#...#.#...#...#.#...#.#.#.#.....#.#.....#.#.......#...#...#.#...#...#.#.....#.#.............#...#.#.#.#.#.#.#.#.......#.#.#...#.#.......#.#.#
###.#.#.#.#.#.#.###.#.#.#.#.#######.###.#.#######.###.###.#####.#.###.#.#.#.#.#############.###.#.#.#.#.#.###.###.###.#.#.#.###.#.#######.#.#
#...#.....#...#...#.#.#...#.#...#...#...#.....#.....#.#.#.......#.#.......#.#.....#...#...#...#.....#.#...#...#...#.....#.#...#...#...#...#.#
#.#####.#####.###.#.#.#####.#.#.#.###.#####.###.#####.#.#########.#.#####.#####.#.#.#.#.#.#.#.#.#####.#.###.###.#######.#.#.#######.#.#.###.#
#.....#.....#...#...#.....#.#.#.#...#.#...#.......#...#.......#...#.#...#...#...#...#.#.#.#.#.#.......#.....#.#.......#.#.#.#.....#.#.#...#.#
#.###.#####.#.###.#.#####.#.#.#.###.#.#.#.#.#######.###.#####.###.#.#.#.###.#.#######.#.#.#.#.#.#.###########.#.#####.###.#.#.###.#.#.###.#.#
#.#.#.....#.#.....#.#.#...#...#.#...#.#.#.#...#.....#...#...#.#...#...#.#...#...#...#...#.#.#.#...#.#.....#...#.#...#.......#...#...#...#.#.#
#.#.#####.#.###.###.#.#.#####.#.#.###.#.#.#####.#######.#.#.#.#.#######.#.#.###.###.#####.#.#######.#.###.#.#.#.#.#.#######.###.#######.#.#.#
#.#...#...#...#...#...#.......#...#.#...#...#...#.......#.#.#.#.......#...#...#...#.#.....#.............#...#.....#...#...#...#...#...#...#.#
#.###.#.#####.###.###.#####.#.#####.#######.#.#####.#####.#.#.#.#.###.###.#######.#.#.#####.#############.###########.#.#.###.#.#.#.#.#####.#
#...#.#...#.#.....#...#.#.......#.........#.#...#...#...#.#...#.#...#.....#...#...#...#...#...#.....#...#.#...#.....#.#.#.......#...#...#...#
###.#.###.#.###.#.#.###.#.#####.###.#.#####.###.#.#####.#.#.#.#.#.#.#######.#.#.#.#.###.#.###.###.#.#.#.#.###.#.###.#.#.#.#####.#####.#.#.###
#.#...#...#.....#.#...#.#.#...#.....#.#.......#.#...#...#.#...#...#.......#.#...#...#...#...#.....#.#.#.#.....#.#.#.#.#.#.....#.....#.#.#...#
#.###.#.###.#####.###.#.#.#.#.#####.#.#.###.###.###.#.#.#.###############.#.#########.#####.#######.#.#.#######.#.#.###.#####.#####.###.###.#
#.....#...#...#.....#.#.#...#.#...#...#.#...#...#...#.#.#.#.....#...#.....#...#...#...#...#.#.......#.#...#...#.#.#...#...#.#...#.#.....#...#
#.#######.###.###.###.#.#####.#.###.###.#####.###.###.###.#.#.###.#.#.#######.#.#.#.###.###.#.#######.###.#.#.#.#.###.#.#.#.###.#.#######.###
#...#...#.#.....#.....#...#...#.......#.....#.#...#.......#.#...#.#.#.#...#...#.#.#.#...#...#.#.......#...#.#...#.....#.#.#.....#...#.....#.#
###.#.#.#.#####.###.###.#.#.#.#.#####.#####.#.#.#.#.#########.#.#.#.#.###.#.###.#.#.#.#.#.#####.#.#.###.###.#####.#######.#.#####.###.#####.#
#.................#.....#...#.#.....#...#...#...#.#...#.....#.#...#.#.....#.#...#...#.#.#.......#.#...#...#.#...#.......#.#.....#...#.#.....#
#.#.#.#######.###.###.#######.#####.###.#.#######.###.#.###.#.#####.#.#.#.#.#.#######.###########.###.#.#.#.#.#.#######.#.#####.###.#.###.#.#
#.#...#.....#.#...#...#.....#.#...#...#.#...........#...#.#.#...#.#.....#.#.#...#...#...........#...#...#...#.#...#...#.#.....#...#.#.....#.#
#.#.#.#.###.#.#.#######.###.#.#.#.###.#.#####.#####.#####.#.###.#.#####.#.#.###.#.#.#.#####.###.###.#.#.#####.###.###.#.#####.###.#.#######.#
#...#...#.#.#.#...#.....#.....#.#.....#.....#.....#.......#...#.#.....#...#...#.#.#.#.#...#...#...#.#.#.#...#...#.....#.......#.#.#.......#.#
#####.###.#.#.###.#.#############.#####.###.#####.#.#########.#.#.#.#.#.#####.#.#.###.#.#.###.###.#.#.#.#.#.#.#.#.#############.#.#.#.###.#.#
#...#...#.....#...#.......#.....#.........#.....#.#.#.........#...#.#.#.#.....#.#.....#.#...#...#.#.#.#.#.#...#.#.#.....#.......#.#.#...#.#.#
#.#.#.#.#######.###.#####.###.#.#.#####.###.#####.#.#.###.#######.#.#.###.#####.#.#####.###.###.###.#.#.#####.#.###.###.#.#.#####.#.###.###.#
#.#...#.....#...#.......#.#...#.#.....#.#...#.......#.#...........#.#.....#...#.#.#.....#.#...#.#...#.#.....#.#...#...#...#.......#.........#
#.###.#####.#.###########.#.###.#####.###.###.#####.#.#.###########.#####.#.#.#.#.#.#.#.#.###.#.#.#########.#.###.###.#############.#.#.#####
#.#.........#.#...........#.#...#...#...#...#.......#.#.....#...#...#.....#.#...#.#...#.#...#...#.#.......#.#...#.#...#.....#...........#...#
#.###.#####.#.###.#########.#.###.#####.###.#####.###.#####.#.###.###.###.#.#####.#.#.#.###.#.###.#.#.###.#.###.#.#.#####.#.###########.#.#.#
#.........#.#.#...#.........#...#...........#.....#...#.....#.#...#...#.#.#.......#.#.#.......#...#.#...#.#.#.#.#.#.#.....#.......#.....#.#.#
#####.###.#.#.#.#####.#.#######.#############.#.###.###.#####.#.###.###.###.#.#####.#.#.#.#####.###.###.#.#.#.#.#.#.#.###########.#####.#.#.#
#.........#.#...#...#.#.#.....#.#...#.....#...#.#...#.#.......#.#.....#...#.#...#...#...#.......#...#...#...#.#.#...#.......#.....#.....#.#.#
#.###.#####.#####.#.#.#.###.###.#.#.#.###.#.#.###.###.#####.#.#.#.#######.#.###.#.#.###############.#.#######.#.#####.#####.###.###.###.#.#.#
#.......#.........#.#.#...#...#...#...#.....#.....#...........#.#...#...#...#...#...#.............#.#.#.....#...#.....#...#...#.....#.#.#...#
#.###.#.#.#.#.#####.###.#.#.#.#########.#######.###.###########.###.#.#.#####.#####.#.#######.#.#.###.#.###.#.###.#####.#.###.#######.#.#.#.#
#.#...#.#...#...#.....#.#.#.#...#.....#.#.......#...#...........#.....#.....#.....#.#.#.....#...#.....#...#.#.#.........#...#...#.........#.#
#.#.#.#.###.###.#####.#.#.#.###.#.#.###.#.#######.###.#####.#.###.#########.#####.#.#.#.###.#.#############.#.#########.#######.#######.###.#
#...#.#.............#.#.#.#.......#.....#.#.........#.#.#...#.......#.......#...#.#.#.#...#...#.........#...#.......#...#.....#...#.....#...#
###.###.#.#.#.#####.#.###.###.###.#######.###########.#.#.###########.#####.#.###.#.#.#.#.#.###.#######.#.#.###.###.###.#.###.#.#.#.#.#.#.#.#
#.....#.#.#.....#...#.....#...#.....#.....#...........#.#.#...........#...#.#.#...#.#...#.#...#.......#...#.#.....#...#.#.#.....#.....#...#.#
#.###.###.#####.#.###.#####.#.#.#####.#.###.###########.#.###.#########.###.#.#.#.#.###.#.###.#######.#####.#.###.###.#.#.#.#####.###.#.#.#.#
#...#...#.....#.#...#.#...#.#.#...#.......#.#...........#...#.........#.....#.#.#...................#.#...#...#...#...#...#.....#.#.......#.#
#.#.###.#.###.#.###.###.#.#.#####.#.###.#.#.#.#######.#.###.#.#.#.###.#.#####.#.#.#########.#######.#.#.#.###.#.###.#.###.#.###.###.#.###.#.#
#.#.#...#.#...#.#.#.#.....#.....#.#.....#...#.#.........#.#...#.#.#.#.#.......#.#.#.............#.#.#.#.#.......#...#...#...#.#.....#.....#.#
#.#.#.###.#.###.#.#.#.###.#####.#.###########.#.#.###.###.#######.#.#.#######.#.#.#.###.#######.#.#.#.#.###########.###.###.#.#######.#.#.#.#
#.#.#...#...#.#.#.#.#...#.....#.........#.....#.#...............#.#...#.......#.#.#.#.#...#...#...#...#.......#.....#.#.....#.#.........#.#.#
#.#.###.###.#.#.#.#.###.#####.#########.#.#####.###.###########.#.#####.#######.###.#.###.#.#.###.#.#.#######.#.###.#.#.#####.#.###.#.#.#.#.#
#.#...#.....#.#...#...#.....#.#...#...#...#.....#...#...#...#.....#...#.#...#.#.....#...#.#.#.#...#.#.....#.#...#...#...#...#...#.#.....#.#.#
#####.#######.#.#.#.#.#####.#.#.#.###.###.#.###.#.#.#.#.#.#.#####.#.#.#.#.#.#.#######.#.#.#.#.#####.#.###.#.#####.###.###.#.#.###.###.#.#.#.#
#...#.......#.#...#.#.#...#.#...#...#.....#.#.....#...#...#...#...#.....#.#.....#.....#...#.#...#...#.#.#.#...#...#.......#...#.......#...#.#
#.#.###.###.#.#.###.###.#.#.#######.#.#.#.#.###.###########.#.#.#.#.#####.#######.#########.###.#.###.#.#.###.#.#####.#.###.###.###.#.#.#.#.#
#.#.#.......#.#...#.....#.......#...#.#...#.#...#.........#.#.#.#...#.#.........#.....#...#.#.#...#.....#...#...#...#.........#...#.#...#.#.#
#.#.#.#.#####.#.#########.#######.#########.#.###.#######.###.#.#.###.#.#######.#####.#.#.#.#.#####.#######.#.###.#.#########.#####.#.#.#.#.#
#.#...#...#.....#.......#.#.#.....#...#.....#.#...#...........#.#.#.............#.....#.#...#.......#.......#.....#.........#.#.....#.#...#.#
#.#####.#.#####.#.#####.#.#.#.#####.#.#.#####.#.###############.#.#########.###.#.#####.#####.#######.#####################.#.#.#####.###.#.#
#.#...#.#.#...#.#.#.....#.#.#.#.....#.#.#...#.#.........#.......#.......#...#.#.#.....#.....#.#.....#.......#...............#...#...#.#.#...#
#.#.#.#.#.#.#.###.#.#####.#.#.#.#####.#.#.#.#.#########.###############.#.###.#.###.#.#.###.#.#.###.#######.#.#######.###########.#.#.#.#.#.#
#.#.#...#...#.#...#.#...#...#...#...#...................#.............#...........#.#.#...#.#...#...#.....#.#.......#.#...#.....#.#.#.#...#.#
#.#.###.#####.#.###.#.#.###.#####.#.#############.###.###.#####.###########.#####.#.#.#.#.#.#####.###.#.#.#.#.#####.#.###.#.#.#.#.#.#.###.#.#
#.......#...#...#.#...#.#.....#...#.#.......#...#...........#...#.........#.#...#...#...#...#...#...#.#...#...#.....#...#...#.#...#...#...#.#
#.###.#.#.#######.#####.#######.###.#.#####.#.#.#############.###.###.###.#.#.#.###.#########.#.###.#.#.#####.#.#.#####.#####.###.#####.#.#.#
#.#...#.#.....#.......#...#.......#.#.....#...#.#.....#.....#...#.#.....#...#.#.......#...#...#.....#.#.......#.#.....#.......#...#.....#.#.#
#.#.###.#.###.#.#.#######.#.###.###.#####.#####.#.###.#.###.###.#.###.#.#####.#####.#.###.#.#################.#.###.#.#########.###.#####.#.#
#.....#.#.....#.#...#.....#.........#...#.#...#...#.#.#...#...#.#...#.#...#...#.#.......#.#.#.............#...#.....#.....#.........#...#...#
#####.#.#.#####.###.#.###.#.#.#######.#.#.#.#.###.#.#.###.###.#.###.#.#.#.#.###.#.#####.#.#.#.###.#.#####.#.#.###########.#.#####.#.#.#.#.###
#.#.....#.....#.#...#.#...#.#.........#.#.#.#.......#...#.#.#.#.#...#.#.#.#.#...#.#.....#.#.#.#...#...#...#.#...........#.#...#.#.#...#.....#
#.#.###.#.#.#.#.#.#.#.#####.###########.#.#.###.#######.#.#.#.#.#.###.#.#.#.###.#.#####.#.#.###.#.#.###.###.#####.#.###.#.###.#.#.#.#.###.#.#
#.#.#.....#.#...#.#.#.#...#.......#...#...#...#.......#.#.#.....#...#...#.#.#...#.....#...#.#...#.#.....#.......#.#...#.....#...#.#...#...#.#
#.#.#.#.#.#####.#.###.#.#.#######.#.#.#######.#######.#.#.#####.###.###.#.#.#.#.#####.#.###.#.###.#.#####.#####.###.#.#.###.#####.#.###.#.###
#.#...#.#.....#.#.#...#.....#.......#...#...........#.#.#.....#...#...#.#.#...#.......#.#...#...#.#...#.#.#.....#.....#...#...#...#...#.#...#
#.#####.#.###.###.#.###.###.#.#########.#######.#####.#.#####.#.#####.###.###.#####.#.###.#.#.#.#.###.#.#.#.###.#.###.#######.#.###.#.#.#.#.#
#...#...#.........#.......#.....#.....#.....#...#...#.#...#...#.#.....#...#...#...#.#...#...#.#.#...#.#...#...#.#.#.#.#.....#.#.....#.#.#.#.#
#.###.#.#.#######.###########.###.###.#####.#####.#.#.###.#.#####.#####.###.###.#.#####.###.###.#.#.#.#.#####.#.#.#.#.#.###.#.#####.#.#.#.#.#
#...#.#...#...#.......#...#.....#.#...#...#.#.....#.....#.#.#...#.#.....#...#...#.........#.....#.#...#...#.#.#.#.#.#.#.#...#...............#
#.#.#.#.#.#.#.#########.#.#.###.#.###.###.#.#.###.#######.#.#.#.#.###.###.###.###########.#######.#######.#.#.#.#.#.#.#.#.#.#.#.#.#.#####.#.#
#.#.#.#...#.#...........#...#...#...#...#.....#...#.......#...#.....#.#...#.#...#.....#...#.....#...#...#.#.#.#.#.#.#...#.#...#.#.#.....#.#.#
#.#.#.#.###.#####.###########.#####.###.#.#########.#######.#######.#.#.###.###.#.#.#.#.###.###.###.#.#.#.#.#.###.#.#####.#.###.#.#.###.#.#.#
#.#.#.#.#.........#.................#.#.#...........#.#.....#.....#...#...#...#.#...#...#...#...#...#.#.#...#...#.#.....#.#.#...#.....#.#.#.#
#.#.#.#.#.###.#####.#.###.#########.#.#.#####.#######.#.#####.###.#######.###.#.#.#.#####.###.###.###.#.###.###.#.#####.#.#.###.###.#.#.#.#.#
#.#...#.#...#.#.....#...#...#.......#.........#.....#.#...#...#.#.....#.............#.#.....#...#...#.#...#.#.#.#.#.....#.#...#.......#.#...#
#.#####.###.#.#.#######.#####.#####.#.###########.#.#.###.#.###.#####.#.#####.###.#.#.#.###.###.###.#.###.#.#.#.#.#.#.#.#.###.#####.#.#.#.#.#
#.#.....#...#.#...#.....#.....#...#.#.#...#.......#.#...#.......#...#.#.#...#...#.#.#.#.#...#.....#...#.#.#...#.....#.#.....#.......#.#...#.#
#.#.#####.#######.#.###.#.###.#.###.###.#.###.#####.#.###.#####.#.###.#.#.#.#####.#.#.#.#.#.#.###.#####.#.###.#######.#.###.#######.#######.#
#...#...#.#.......#...#.#.#.....#...#...#...#.#.....#.#...#.....#...#...#.#.......#...#...#.#.#...#.....#.#.#.#.#.......#.........#.........#
#.###.#.#.#.#########.###.#.#.#.#.###.#####.#.#####.#.#.#.#.#.#####.#####.#######.#########.#.#.#####.###.#.#.#.#.#.###.#.#######.###########
#.#...#...#...#.....#...#.#.#...#.....#.....#.....#...#...#.#...#...#...#.#...#...#.................#...#.#.....#.#...#.#.#...#...#.........#
#.#.#.#.#####.#.#.#####.#.#.#.#########.#######.#.#######.#.#.#.#.#.#.###.###.#.###.#.#####.#.#.#.#.###.#.#####.#.###.#.#.#.#.#####.#####.#.#
#.#.#.#.#...#.#.#.....#...#.#.#...#...#...#...#.#.#.......#.#.#...#.#...#...#...#...#.......#.#...#.....#...#...#.#...#.#.#.#.....#...#...#.#
###.#.#.#.#.#.#.#####.#####.#.#.#.#.#####.#.#.#.#.#.#######.#.#####.###.###.###.#.###########.#########.###.#.###.#.###.###.#####.#.#.#.###.#
#...........#.#...#...#.....#...#...#.....#.#.#.#.....#...#...#...#.......#...#.#...#.#.....#.......#.....#.#...#.......#.......#...#.#.#...#
#.###.###.#.#.###.#.#.#.#####.#####.#.#####.#.###.#####.#.###.#.#########.###.#####.#.#.#.#########.#######.###.#.#######.#######.###.#.#####
#.#.....#.#...#.....#...#...#.......#.......#...#.#.....#.....#.#.........#...#.....#.#.#.....#.#...#.......#...#...........#...#...#.#.....#
#.###.###.#####.#########.###.#################.###.#####.#.#.#.#.#########.###.#####.#.###.#.#.#.###.#######.###############.#.###.#.#####.#
#.........#...#.#...#.........#...#.................#.....#.#...#.#.....#...#...#...#...#.#.#...#.....#.....#...........#.....#...#...#.....#
#.###.#####.#.#.#.#.#.#####.#.#.#.#.#.#########.#.###.#.#.#.#####.###.#.#.###.###.###.###.#.###.#######.#.###.###########.#######.#####.###.#
#.#.........#...#.#.#.#.......#.#...#.#...#...#.#...#.#.#.#.#.....#...#.#...#.#...........#.#...#.....#.#.....#...#...#...#.#...#...#...#.#.#
#.###.###########.#.#.###.###.#.#######.#.#.#.#####.###.#.#.#.#####.###.###.#.#############.#.###.###.#########.#.#.#.#.###.#.#.###.#.###.#.#
#S....#...........#.......#...#.........#...#...........#.#.........#.....#.................#.....#.............#...#...#.....#.......#.....#
#############################################################################################################################################";

    assert_eq!(135536, minimum_path(&parse_map(&source)));

}
